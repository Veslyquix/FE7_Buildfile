import six, tmx, sys, os, lzss

def show_exception_and_exit(exc_type, exc_value, tb):
	import traceback

	traceback.print_exception(exc_type, exc_value, tb)
	sys.exit(-1)

def tile_tmx2gbafe(tileIndex):
	return 4 * (tileIndex - 1)

class TileChangeData:

	def __init__(self, tmxLayer, index, xPos, yPos, width, height):
		self.index     = index
		self.xPosition = xPos
		self.yPosition = yPos
		self.width     = width
		self.height    = height

		self.name      = tmxLayer.name.replace(' ', '_')
		self.tiles     = [tile_tmx2gbafe(tile.gid) for tile in tmxLayer.tiles if tile.gid is not 0]

	def gen_event(self):
		yield "ALIGN 4\n"
		yield "{0}:\n".format(self.name)
		
		result = "SHORT"

		for tile in self.tiles:
			result += " " + hex(tile)

		yield result + '\n\n'

class MapData:

	def __init__(self, tmxMap):
		self.chapterIndex = "ChapterID"
		self.objectType = "ObjectType"
		self.objectType2 = "0"
		self.paletteIndex = "PaletteID"
		self.tileConfig = "TileConfig"
		self.mapIndex = "map_id"
		self.anims1 = "0"
		self.anims2 = "0"
		self.mapChangesIndex = "map_changes"

		self.mainData    = None
		self.tileChanges = []

		self.mapWidth  = tmxMap.width
		self.mapHeight = tmxMap.height

		for tmxLayer in tmxMap.layers:
			isMain = False

			layerIndex = ''
			layerHeight = ''
			layerWidth = ''
			layerXPos = ''
			layerYPos = ''

			for p in tmxLayer.properties:
				if p.name.lower() == "main":
					if self.mainData != None:
						sys.exit("Multiple main layers set.")

					isMain = True
					self.mainData = [tile_tmx2gbafe(tile.gid) for tile in tmxLayer.tiles]
				
				elif p.name.lower() == "id":
					layerIndex = p.value
				
				elif p.name.lower() == "height":
					layerHeight = p.value
				
				elif p.name.lower() == "width":
					layerWidth = p.value
				
				elif p.name.lower() == "x":
					layerXPos = p.value
				
				elif p.name.lower() == "y":
					layerYPos = p.value
				
				elif p.name.lower() == "chapterid":
					self.chapterIndex = p.value
				
				elif p.name.lower() == "objecttype":
					self.objectType = p.value
				
				elif p.name.lower() == "objecttype1":
					self.objectType = p.value
				
				elif p.name.lower() == "objecttype2":
					self.objectType2 = p.value				
				
				elif p.name.lower() == "paletteid":
					self.paletteIndex = p.value
				
				elif p.name.lower() == "tileconfig":
					self.tileConfig = p.value
				
				elif p.name.lower() == "mapid":
					self.mapIndex = p.value
				
				elif p.name.lower() == "mapchangesid":
					self.mapChangesIndex = p.value
				
				elif p.name.lower() == "anims":
					self.anims1 = p.value
				
				elif p.name.lower() == "anims1":
					self.anims1 = p.value
				
				elif p.name.lower() == "anims2":
					self.anims2 = p.value
			
			if (not isMain) and len(tmxMap.layers) == 1: # for the case of no properties and one layer
				isMain = True
				self.mainData = [tile_tmx2gbafe(tile.gid) for tile in tmxLayer.tiles]
			
			if not isMain: # write any tile change layers
				self.tileChanges.append(TileChangeData(tmxLayer, layerIndex, layerXPos, layerYPos, layerWidth, layerHeight))

		if self.mainData == None: # handle the case of no main and multiple layers
			sys.exit("No Main layer found.")

	def write_map_data_bytes(self, output):
		data = [self.mapWidth + (self.mapHeight << 8)]
		data.extend(self.mainData)

		lzss.compress(b''.join([(x).to_bytes(2, 'little') for x in data]), output)

	def gen_chapter_data_entry(self):
		yield "SetChapterData({0},{1},{2},{3},{4},{5},Map,{6},{7},{8})\n".format(
			self.chapterIndex,
			self.objectType,
			self.objectType2,
			self.paletteIndex,
			self.tileConfig,
			self.mapIndex,
			self.anims1,
			self.anims2,
			self.mapChangesIndex if len(self.tileChanges) > 0 else "0"
		)

		if len(self.tileChanges) > 0:
			yield "EventPointerTable({0},MapChanges)\n".format(self.mapChangesIndex)

		yield '\n'

def gen_header():
	yield "// Map Data Installer Generated by tmx2ea\n\n"

	yield '#include "EAstdlib.event"\n\n'

	yield "#ifndef TMX2EA\n"
	yield "#define TMX2EA\n\n"

	yield "#ifndef ChapterDataTable\n"
	yield "    #ifdef _FE7_\n"
	yield "        #define ChapterDataTable 0xC9A200\n"
	yield "    #endif\n"
	yield "    #ifdef _FE8_\n"
	yield "        #define ChapterDataTable 0x8B0890\n"
	yield "    #endif\n"
	yield "#endif\n\n"

	yield '#define SetChapterData(ChapterID,ObjectType1,ObjectType2,PaletteID,TileConfig,MapID,MapPointer,Anims1,Anims2,MapChanges) "PUSH; ORG ChapterDataTable+(ChapterID*148)+4; BYTE ObjectType1 ObjectType2 PaletteID TileConfig MapID Anims1 Anims2 MapChanges; EventPointerTable(MapID,MapPointer); POP"\n\n'

	yield "#endif // TMX2EA\n\n"

def main():
	sys.excepthook = show_exception_and_exit

	if len(sys.argv) < 3:
		sys.exit("Usage: {0} <tmx file> <output event file>".format(sys.argv[0]))

	tmxFile = sys.argv[1]
	outFile = sys.argv[2]

	if not os.path.exists(tmxFile):
		sys.exit("File `{0}` doesn't exist.".format(tmxFile))

	binFile = os.path.splitext(outFile)[0] + "_data.dmp"

	mapData = MapData(tmx.TileMap.load(tmxFile))

	with open(binFile, 'wb') as file:
		mapData.write_map_data_bytes(file)

	with open(outFile, 'w') as file:
		file.writelines(gen_header())
		file.write("{\n\n")

		file.writelines(mapData.gen_chapter_data_entry())

		file.write('Map:\n#incbin "{0}"\n\n'.format(os.path.relpath(binFile, os.path.dirname(outFile))))

		if len(mapData.tileChanges) > 0:
			file.write('MapChanges:\n')

			for mapChange in mapData.tileChanges:
				file.write('TileMap({0},{1},{2},{3},{4},{5})\n'.format(
					mapChange.index,
					mapChange.xPosition,
					mapChange.yPosition,
					mapChange.width,
					mapChange.height,
					mapChange.name
				))

			file.write('TileMapEnd\n\n')

			for mapChange in mapData.tileChanges:
				file.writelines(mapChange.gen_event())

		file.write("}\n")

if __name__ == '__main__':
	main()
